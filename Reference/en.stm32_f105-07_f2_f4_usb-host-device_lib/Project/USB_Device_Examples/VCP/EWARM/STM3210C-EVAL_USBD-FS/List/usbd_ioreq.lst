###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.4.12462/W32 for ARM       19/Nov/2018  00:47:30
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\DYH\01_EmbeddedSoftware\Github\0.1_OBC\Reference\en.stm32_f105-07_f2_f4_usb-host-device_lib\Libraries\STM32_USB_Device_Library\Core\src\usbd_ioreq.c
#    Command line =  
#        E:\DYH\01_EmbeddedSoftware\Github\0.1_OBC\Reference\en.stm32_f105-07_f2_f4_usb-host-device_lib\Libraries\STM32_USB_Device_Library\Core\src\usbd_ioreq.c
#        -D USE_STDPERIPH_DRIVER -D STM32F10X_CL -D USE_STM3210C_EVAL -D
#        USE_USB_OTG_FS -lcN
#        E:\DYH\01_EmbeddedSoftware\Github\0.1_OBC\Reference\en.stm32_f105-07_f2_f4_usb-host-device_lib\Project\USB_Device_Examples\VCP\EWARM\STM3210C-EVAL_USBD-FS\List
#        -o
#        E:\DYH\01_EmbeddedSoftware\Github\0.1_OBC\Reference\en.stm32_f105-07_f2_f4_usb-host-device_lib\Project\USB_Device_Examples\VCP\EWARM\STM3210C-EVAL_USBD-FS\Obj
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "E:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Full.h" -I
#        E:\DYH\01_EmbeddedSoftware\Github\0.1_OBC\Reference\en.stm32_f105-07_f2_f4_usb-host-device_lib\Project\USB_Device_Examples\VCP\EWARM\..\inc\
#        -I
#        E:\DYH\01_EmbeddedSoftware\Github\0.1_OBC\Reference\en.stm32_f105-07_f2_f4_usb-host-device_lib\Project\USB_Device_Examples\VCP\EWARM\..\..\..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include\
#        -I
#        E:\DYH\01_EmbeddedSoftware\Github\0.1_OBC\Reference\en.stm32_f105-07_f2_f4_usb-host-device_lib\Project\USB_Device_Examples\VCP\EWARM\..\..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc\
#        -I
#        E:\DYH\01_EmbeddedSoftware\Github\0.1_OBC\Reference\en.stm32_f105-07_f2_f4_usb-host-device_lib\Project\USB_Device_Examples\VCP\EWARM\..\..\..\..\Libraries\STM32_USB_OTG_Driver\inc\
#        -I
#        E:\DYH\01_EmbeddedSoftware\Github\0.1_OBC\Reference\en.stm32_f105-07_f2_f4_usb-host-device_lib\Project\USB_Device_Examples\VCP\EWARM\..\..\..\..\Libraries\STM32_USB_Device_Library\Core\inc\
#        -I
#        E:\DYH\01_EmbeddedSoftware\Github\0.1_OBC\Reference\en.stm32_f105-07_f2_f4_usb-host-device_lib\Project\USB_Device_Examples\VCP\EWARM\..\..\..\..\Libraries\STM32_USB_Device_Library\Class\cdc\inc\
#        -I
#        E:\DYH\01_EmbeddedSoftware\Github\0.1_OBC\Reference\en.stm32_f105-07_f2_f4_usb-host-device_lib\Project\USB_Device_Examples\VCP\EWARM\..\..\..\..\Utilities\STM32_EVAL\
#        -I
#        E:\DYH\01_EmbeddedSoftware\Github\0.1_OBC\Reference\en.stm32_f105-07_f2_f4_usb-host-device_lib\Project\USB_Device_Examples\VCP\EWARM\..\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        E:\DYH\01_EmbeddedSoftware\Github\0.1_OBC\Reference\en.stm32_f105-07_f2_f4_usb-host-device_lib\Project\USB_Device_Examples\VCP\EWARM\..\..\..\..\Utilities\STM32_EVAL\STM3210C_EVAL\
#        -Ohz --use_c++_inline -I "E:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  Chinese (Simplified)_China.936
#    List file    =  
#        E:\DYH\01_EmbeddedSoftware\Github\0.1_OBC\Reference\en.stm32_f105-07_f2_f4_usb-host-device_lib\Project\USB_Device_Examples\VCP\EWARM\STM3210C-EVAL_USBD-FS\List\usbd_ioreq.lst
#    Object file  =  
#        E:\DYH\01_EmbeddedSoftware\Github\0.1_OBC\Reference\en.stm32_f105-07_f2_f4_usb-host-device_lib\Project\USB_Device_Examples\VCP\EWARM\STM3210C-EVAL_USBD-FS\Obj\usbd_ioreq.o
#
###############################################################################

E:\DYH\01_EmbeddedSoftware\Github\0.1_OBC\Reference\en.stm32_f105-07_f2_f4_usb-host-device_lib\Libraries\STM32_USB_Device_Library\Core\src\usbd_ioreq.c
      1          /**
      2            ******************************************************************************
      3            * @file    usbd_ioreq.c
      4            * @author  MCD Application Team
      5            * @version V1.2.1
      6            * @date    17-March-2018
      7            * @brief   This file provides the IO requests APIs for control endpoints.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; Copyright (c) 2015 STMicroelectronics.
     12            * All rights reserved.</center></h2>
     13            *
     14            * This software component is licensed by ST under Ultimate Liberty license
     15            * SLA0044, the "License"; You may not use this file except in compliance with
     16            * the License. You may obtain a copy of the License at:
     17            *                      <http://www.st.com/SLA0044>
     18            *
     19            ******************************************************************************
     20            */ 
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "usbd_ioreq.h"
     24          
     25          /** @addtogroup STM32_USB_OTG_DEVICE_LIBRARY
     26            * @{
     27            */
     28          
     29          
     30          /** @defgroup USBD_IOREQ 
     31            * @brief control I/O requests module
     32            * @{
     33            */ 
     34          
     35          /** @defgroup USBD_IOREQ_Private_TypesDefinitions
     36            * @{
     37            */ 
     38          /**
     39            * @}
     40            */ 
     41          
     42          
     43          /** @defgroup USBD_IOREQ_Private_Defines
     44            * @{
     45            */ 
     46          
     47          /**
     48            * @}
     49            */ 
     50          
     51          
     52          /** @defgroup USBD_IOREQ_Private_Macros
     53            * @{
     54            */ 
     55          /**
     56            * @}
     57            */ 
     58          
     59          
     60          /** @defgroup USBD_IOREQ_Private_Variables
     61            * @{
     62            */ 
     63          
     64          /**
     65            * @}
     66            */ 
     67          
     68          
     69          /** @defgroup USBD_IOREQ_Private_FunctionPrototypes
     70            * @{
     71            */ 
     72          /**
     73            * @}
     74            */ 
     75          
     76          
     77          /** @defgroup USBD_IOREQ_Private_Functions
     78            * @{
     79            */ 
     80          
     81          /**
     82          * @brief  USBD_CtlSendData
     83          *         send data on the ctl pipe
     84          * @param  pdev: device instance
     85          * @param  buff: pointer to data buffer
     86          * @param  len: length of data to be sent
     87          * @retval status
     88          */
     89          USBD_Status  USBD_CtlSendData (USB_OTG_CORE_HANDLE  *pdev, 
     90                                         uint8_t *pbuf,
     91                                         uint16_t len)
     92          {
     93            USBD_Status ret = USBD_OK;
     94            
     95            pdev->dev.in_ep[0].total_data_len = len;
     96            pdev->dev.in_ep[0].rem_data_len   = len;
     97            pdev->dev.device_state = USB_OTG_EP0_DATA_IN;
     98          
     99            DCD_EP_Tx (pdev, 0, pbuf, len);
    100           
    101            return ret;
    102          }
    103          
    104          /**
    105          * @brief  USBD_CtlContinueSendData
    106          *         continue sending data on the ctl pipe
    107          * @param  pdev: device instance
    108          * @param  buff: pointer to data buffer
    109          * @param  len: length of data to be sent
    110          * @retval status
    111          */
    112          USBD_Status  USBD_CtlContinueSendData (USB_OTG_CORE_HANDLE  *pdev, 
    113                                                 uint8_t *pbuf,
    114                                                 uint16_t len)
    115          {
    116            USBD_Status ret = USBD_OK;
    117            
    118            DCD_EP_Tx (pdev, 0, pbuf, len);
    119            
    120            
    121            return ret;
    122          }
    123          
    124          /**
    125          * @brief  USBD_CtlPrepareRx
    126          *         receive data on the ctl pipe
    127          * @param  pdev: USB OTG device instance
    128          * @param  buff: pointer to data buffer
    129          * @param  len: length of data to be received
    130          * @retval status
    131          */
    132          USBD_Status  USBD_CtlPrepareRx (USB_OTG_CORE_HANDLE  *pdev,
    133                                            uint8_t *pbuf,                                  
    134                                            uint16_t len)
    135          {
    136            USBD_Status ret = USBD_OK;
    137            
    138            pdev->dev.out_ep[0].total_data_len = len;
    139            pdev->dev.out_ep[0].rem_data_len   = len;
    140            pdev->dev.device_state = USB_OTG_EP0_DATA_OUT;
    141            
    142            DCD_EP_PrepareRx (pdev,
    143                              0,
    144                              pbuf,
    145                              len);
    146            
    147          
    148            return ret;
    149          }
    150          
    151          /**
    152          * @brief  USBD_CtlContinueRx
    153          *         continue receive data on the ctl pipe
    154          * @param  pdev: USB OTG device instance
    155          * @param  buff: pointer to data buffer
    156          * @param  len: length of data to be received
    157          * @retval status
    158          */
    159          USBD_Status  USBD_CtlContinueRx (USB_OTG_CORE_HANDLE  *pdev, 
    160                                                    uint8_t *pbuf,                                          
    161                                                    uint16_t len)
    162          {
    163            USBD_Status ret = USBD_OK;
    164            
    165            DCD_EP_PrepareRx (pdev,
    166                              0,                     
    167                              pbuf,                         
    168                              len);
    169            return ret;
    170          }
    171          /**
    172          * @brief  USBD_CtlSendStatus
    173          *         send zero length packet on the ctl pipe
    174          * @param  pdev: USB OTG device instance
    175          * @retval status
    176          */
    177          USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
    178          {
    179            USBD_Status ret = USBD_OK;
    180            pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
    181            DCD_EP_Tx (pdev,
    182                       0,
    183                       NULL, 
    184                       0); 
    185            
    186            USB_OTG_EP0_OutStart(pdev);  
    187            
    188            return ret;
    189          }
    190          
    191          /**
    192          * @brief  USBD_CtlReceiveStatus
    193          *         receive zero length packet on the ctl pipe
    194          * @param  pdev: USB OTG device instance
    195          * @retval status
    196          */
    197          USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
    198          {
    199            USBD_Status ret = USBD_OK;
    200            pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
    201            DCD_EP_PrepareRx ( pdev,
    202                              0,
    203                              NULL,
    204                              0);  
    205          
    206            USB_OTG_EP0_OutStart(pdev);
    207            
    208            return ret;
    209          }
    210          
    211          
    212          /**
    213          * @brief  USBD_GetRxCount
    214          *         returns the received data length
    215          * @param  pdev: USB OTG device instance
    216          *         epnum: endpoint index
    217          * @retval Rx Data blength
    218          */
    219          uint16_t  USBD_GetRxCount (USB_OTG_CORE_HANDLE  *pdev , uint8_t epnum)
    220          {
    221            return pdev->dev.out_ep[epnum].xfer_count;
    222          }
    223          
    224          /**
    225            * @}
    226            */ 
    227          
    228          
    229          /**
    230            * @}
    231            */ 
    232          
    233          
    234          /**
    235            * @}
    236            */ 
    237          
    238          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   USBD_CtlContinueRx
         8   -> DCD_EP_PrepareRx
       0   USBD_CtlContinueSendData
         8   -> DCD_EP_Tx
       8   USBD_CtlPrepareRx
         8   -> DCD_EP_PrepareRx
       8   USBD_CtlReceiveStatus
         8   -> DCD_EP_PrepareRx
         8   -> USB_OTG_EP0_OutStart
       8   USBD_CtlSendData
         8   -> DCD_EP_Tx
       8   USBD_CtlSendStatus
         8   -> DCD_EP_Tx
         8   -> USB_OTG_EP0_OutStart
       0   USBD_GetRxCount


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      14  ?Subroutine0
      14  ?Subroutine1
      10  ?Subroutine2
      14  ?Subroutine3
       2  USBD_CtlContinueRx
       2  USBD_CtlContinueSendData
      20  USBD_CtlPrepareRx
      14  USBD_CtlReceiveStatus
      20  USBD_CtlSendData
      16  USBD_CtlSendStatus
      14  USBD_GetRxCount

 
 140 bytes in section .text
 
 140 bytes of CODE memory

Errors: none
Warnings: none
