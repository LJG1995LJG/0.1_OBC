###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.4.12462/W32 for ARM       19/Nov/2018  00:45:13
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\DYH\01_EmbeddedSoftware\Github\0.1_OBC\Reference\en.stm32_f105-07_f2_f4_usb-host-device_lib\Project\USB_Device_Examples\VCP\src\usbd_desc.c
#    Command line =  
#        E:\DYH\01_EmbeddedSoftware\Github\0.1_OBC\Reference\en.stm32_f105-07_f2_f4_usb-host-device_lib\Project\USB_Device_Examples\VCP\src\usbd_desc.c
#        -D USE_STDPERIPH_DRIVER -D STM32F10X_CL -D USE_STM3210C_EVAL -D
#        USE_USB_OTG_FS -lcN
#        E:\DYH\01_EmbeddedSoftware\Github\0.1_OBC\Reference\en.stm32_f105-07_f2_f4_usb-host-device_lib\Project\USB_Device_Examples\VCP\EWARM\STM3210C-EVAL_USBD-FS\List
#        -o
#        E:\DYH\01_EmbeddedSoftware\Github\0.1_OBC\Reference\en.stm32_f105-07_f2_f4_usb-host-device_lib\Project\USB_Device_Examples\VCP\EWARM\STM3210C-EVAL_USBD-FS\Obj
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "E:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Full.h" -I
#        E:\DYH\01_EmbeddedSoftware\Github\0.1_OBC\Reference\en.stm32_f105-07_f2_f4_usb-host-device_lib\Project\USB_Device_Examples\VCP\EWARM\..\inc\
#        -I
#        E:\DYH\01_EmbeddedSoftware\Github\0.1_OBC\Reference\en.stm32_f105-07_f2_f4_usb-host-device_lib\Project\USB_Device_Examples\VCP\EWARM\..\..\..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include\
#        -I
#        E:\DYH\01_EmbeddedSoftware\Github\0.1_OBC\Reference\en.stm32_f105-07_f2_f4_usb-host-device_lib\Project\USB_Device_Examples\VCP\EWARM\..\..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc\
#        -I
#        E:\DYH\01_EmbeddedSoftware\Github\0.1_OBC\Reference\en.stm32_f105-07_f2_f4_usb-host-device_lib\Project\USB_Device_Examples\VCP\EWARM\..\..\..\..\Libraries\STM32_USB_OTG_Driver\inc\
#        -I
#        E:\DYH\01_EmbeddedSoftware\Github\0.1_OBC\Reference\en.stm32_f105-07_f2_f4_usb-host-device_lib\Project\USB_Device_Examples\VCP\EWARM\..\..\..\..\Libraries\STM32_USB_Device_Library\Core\inc\
#        -I
#        E:\DYH\01_EmbeddedSoftware\Github\0.1_OBC\Reference\en.stm32_f105-07_f2_f4_usb-host-device_lib\Project\USB_Device_Examples\VCP\EWARM\..\..\..\..\Libraries\STM32_USB_Device_Library\Class\cdc\inc\
#        -I
#        E:\DYH\01_EmbeddedSoftware\Github\0.1_OBC\Reference\en.stm32_f105-07_f2_f4_usb-host-device_lib\Project\USB_Device_Examples\VCP\EWARM\..\..\..\..\Utilities\STM32_EVAL\
#        -I
#        E:\DYH\01_EmbeddedSoftware\Github\0.1_OBC\Reference\en.stm32_f105-07_f2_f4_usb-host-device_lib\Project\USB_Device_Examples\VCP\EWARM\..\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        E:\DYH\01_EmbeddedSoftware\Github\0.1_OBC\Reference\en.stm32_f105-07_f2_f4_usb-host-device_lib\Project\USB_Device_Examples\VCP\EWARM\..\..\..\..\Utilities\STM32_EVAL\STM3210C_EVAL\
#        -Ohz --use_c++_inline -I "E:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  Chinese (Simplified)_China.936
#    List file    =  
#        E:\DYH\01_EmbeddedSoftware\Github\0.1_OBC\Reference\en.stm32_f105-07_f2_f4_usb-host-device_lib\Project\USB_Device_Examples\VCP\EWARM\STM3210C-EVAL_USBD-FS\List\usbd_desc.lst
#    Object file  =  
#        E:\DYH\01_EmbeddedSoftware\Github\0.1_OBC\Reference\en.stm32_f105-07_f2_f4_usb-host-device_lib\Project\USB_Device_Examples\VCP\EWARM\STM3210C-EVAL_USBD-FS\Obj\usbd_desc.o
#
###############################################################################

E:\DYH\01_EmbeddedSoftware\Github\0.1_OBC\Reference\en.stm32_f105-07_f2_f4_usb-host-device_lib\Project\USB_Device_Examples\VCP\src\usbd_desc.c
      1          /**
      2            ******************************************************************************
      3            * @file    usbd_desc.c
      4            * @author  MCD Application Team
      5            * @version V1.2.1
      6            * @date    17-March-2018
      7            * @brief   This file provides the USBD descriptors and string formating method.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; Copyright (c) 2015 STMicroelectronics.
     12            * All rights reserved.</center></h2>
     13            *
     14            * This software component is licensed by ST under Ultimate Liberty license
     15            * SLA0044, the "License"; You may not use this file except in compliance with
     16            * the License. You may obtain a copy of the License at:
     17            *                      <http://www.st.com/SLA0044>
     18            *
     19            ******************************************************************************
     20            */
     21          
     22          /* Includes ------------------------------------------------------------------ */
     23          #include "usbd_core.h"
     24          #include "usbd_desc.h"
     25          #include "usbd_req.h"
     26          #include "usbd_conf.h"
     27          #include "usb_regs.h"
     28          
     29          /** @addtogroup STM32_USB_OTG_DEVICE_LIBRARY
     30            * @{
     31            */
     32          
     33          
     34          /** @defgroup USBD_DESC 
     35            * @brief USBD descriptors module
     36            * @{
     37            */
     38          
     39          /** @defgroup USBD_DESC_Private_TypesDefinitions
     40            * @{
     41            */
     42          /**
     43            * @}
     44            */
     45          
     46          
     47          /** @defgroup USBD_DESC_Private_Defines
     48            * @{
     49            */
     50          #define USBD_VID                        0x0483
     51          #define USBD_PID                        0x5740
     52          
     53          /** @defgroup USB_String_Descriptors
     54            * @{
     55            */
     56          #define USBD_LANGID_STRING              0x409
     57          #define USBD_MANUFACTURER_STRING        "STMicroelectronics"
     58          #define USBD_PRODUCT_HS_STRING          "STM32 Virtual ComPort in HS mode"
     59          #define USBD_PRODUCT_FS_STRING          "STM32 Virtual ComPort in FS Mode"
     60          #define USBD_CONFIGURATION_HS_STRING    "VCP Config"
     61          #define USBD_INTERFACE_HS_STRING        "VCP Interface"
     62          #define USBD_CONFIGURATION_FS_STRING    "VCP Config"
     63          #define USBD_INTERFACE_FS_STRING        "VCP Interface"
     64          /**
     65            * @}
     66            */
     67          
     68          
     69          /** @defgroup USBD_DESC_Private_Macros
     70            * @{
     71            */
     72          /**
     73            * @}
     74            */
     75          
     76          
     77          /** @defgroup USBD_DESC_Private_Variables
     78            * @{
     79            */
     80          
     81          USBD_DEVICE USR_desc = {
     82            USBD_USR_DeviceDescriptor,
     83            USBD_USR_LangIDStrDescriptor,
     84            USBD_USR_ManufacturerStrDescriptor,
     85            USBD_USR_ProductStrDescriptor,
     86            USBD_USR_SerialStrDescriptor,
     87            USBD_USR_ConfigStrDescriptor,
     88            USBD_USR_InterfaceStrDescriptor,
     89          };
     90          
     91          #ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED
     92          #if defined ( __ICCARM__ )      /* !< IAR Compiler */
     93          #pragma data_alignment=4
     94          #endif
     95          #endif                          /* USB_OTG_HS_INTERNAL_DMA_ENABLED */
     96          /* USB Standard Device Descriptor */
     97          __ALIGN_BEGIN uint8_t USBD_DeviceDesc[USB_SIZ_DEVICE_DESC] __ALIGN_END = {
     98            0x12,                         /* bLength */
     99            USB_DEVICE_DESCRIPTOR_TYPE,   /* bDescriptorType */
    100            0x00,                         /* bcdUSB */
    101            0x02,
    102            0x02,                         /* bDeviceClass */
    103            0x02,                         /* bDeviceSubClass */
    104            0x00,                         /* bDeviceProtocol */
    105            USB_OTG_MAX_EP0_SIZE,         /* bMaxPacketSize */
    106            LOBYTE(USBD_VID),             /* idVendor */
    107            HIBYTE(USBD_VID),             /* idVendor */
    108            LOBYTE(USBD_PID),             /* idVendor */
    109            HIBYTE(USBD_PID),             /* idVendor */
    110            0x00,                         /* bcdDevice rel. 2.00 */
    111            0x02,
    112            USBD_IDX_MFC_STR,             /* Index of manufacturer string */
    113            USBD_IDX_PRODUCT_STR,         /* Index of product string */
    114            USBD_IDX_SERIAL_STR,          /* Index of serial number string */
    115            USBD_CFG_MAX_NUM              /* bNumConfigurations */
    116          };                              /* USB_DeviceDescriptor */
    117          
    118          #ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED
    119          #if defined ( __ICCARM__ )      /* !< IAR Compiler */
    120          #pragma data_alignment=4
    121          #endif
    122          #endif                          /* USB_OTG_HS_INTERNAL_DMA_ENABLED */
    123          /* USB Standard Device Descriptor */
    124          __ALIGN_BEGIN uint8_t USBD_DeviceQualifierDesc[USB_LEN_DEV_QUALIFIER_DESC]
    125            __ALIGN_END = {
    126            USB_LEN_DEV_QUALIFIER_DESC,
    127            USB_DESC_TYPE_DEVICE_QUALIFIER,
    128            0x00,
    129            0x02,
    130            0x00,
    131            0x00,
    132            0x00,
    133            0x40,
    134            0x01,
    135            0x00,
    136          };
    137          
    138          #ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED
    139          #if defined ( __ICCARM__ )      /* !< IAR Compiler */
    140          #pragma data_alignment=4
    141          #endif
    142          #endif                          /* USB_OTG_HS_INTERNAL_DMA_ENABLED */
    143          /* USB Standard Device Descriptor */
    144          __ALIGN_BEGIN uint8_t USBD_LangIDDesc[USB_SIZ_STRING_LANGID] __ALIGN_END = {
    145            USB_SIZ_STRING_LANGID,
    146            USB_DESC_TYPE_STRING,
    147            LOBYTE(USBD_LANGID_STRING),
    148            HIBYTE(USBD_LANGID_STRING),
    149          };
    150          
    151          uint8_t USBD_StringSerial[USB_SIZ_STRING_SERIAL] = {
    152            USB_SIZ_STRING_SERIAL,
    153            USB_DESC_TYPE_STRING,
    154          };
    155          
    156          #ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED
    157          #if defined ( __ICCARM__ )      /* !< IAR Compiler */
    158          #pragma data_alignment=4
    159          #endif
    160          #endif                          /* USB_OTG_HS_INTERNAL_DMA_ENABLED */
    161          __ALIGN_BEGIN uint8_t USBD_StrDesc[USB_MAX_STR_DESC_SIZ] __ALIGN_END;
    162          
    163          /**
    164            * @}
    165            */
    166          
    167          
    168          /** @defgroup USBD_DESC_Private_FunctionPrototypes
    169            * @{
    170            */
    171          static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len);
    172          static void Get_SerialNum(void);
    173          /**
    174            * @}
    175            */
    176          
    177          
    178          /** @defgroup USBD_DESC_Private_Functions
    179            * @{
    180            */
    181          
    182          /**
    183          * @brief  USBD_USR_DeviceDescriptor 
    184          *         return the device descriptor
    185          * @param  speed : current device speed
    186          * @param  length : pointer to data length variable
    187          * @retval pointer to descriptor buffer
    188          */
    189          uint8_t *USBD_USR_DeviceDescriptor(uint8_t speed, uint16_t * length)
    190          {
    191            *length = sizeof(USBD_DeviceDesc);
    192            return (uint8_t *) USBD_DeviceDesc;
    193          }
    194          
    195          /**
    196          * @brief  USBD_USR_LangIDStrDescriptor 
    197          *         return the LangID string descriptor
    198          * @param  speed : current device speed
    199          * @param  length : pointer to data length variable
    200          * @retval pointer to descriptor buffer
    201          */
    202          uint8_t *USBD_USR_LangIDStrDescriptor(uint8_t speed, uint16_t * length)
    203          {
    204            *length = sizeof(USBD_LangIDDesc);
    205            return (uint8_t *) USBD_LangIDDesc;
    206          }
    207          
    208          
    209          /**
    210          * @brief  USBD_USR_ProductStrDescriptor 
    211          *         return the product string descriptor
    212          * @param  speed : current device speed
    213          * @param  length : pointer to data length variable
    214          * @retval pointer to descriptor buffer
    215          */
    216          uint8_t *USBD_USR_ProductStrDescriptor(uint8_t speed, uint16_t * length)
    217          {
    218            if (speed == 0)
    219            {
    220              USBD_GetString((uint8_t *) (uint8_t *) USBD_PRODUCT_HS_STRING, USBD_StrDesc,
    221                             length);
    222            }
    223            else
    224            {
    225              USBD_GetString((uint8_t *) (uint8_t *) USBD_PRODUCT_FS_STRING, USBD_StrDesc,
    226                             length);
    227            }
    228            return USBD_StrDesc;
    229          }
    230          
    231          /**
    232          * @brief  USBD_USR_ManufacturerStrDescriptor 
    233          *         return the manufacturer string descriptor
    234          * @param  speed : current device speed
    235          * @param  length : pointer to data length variable
    236          * @retval pointer to descriptor buffer
    237          */
    238          uint8_t *USBD_USR_ManufacturerStrDescriptor(uint8_t speed, uint16_t * length)
    239          {
    240            USBD_GetString((uint8_t *) (uint8_t *) USBD_MANUFACTURER_STRING, USBD_StrDesc,
    241                           length);
    242            return USBD_StrDesc;
    243          }
    244          
    245          /**
    246          * @brief  USBD_USR_SerialStrDescriptor 
    247          *         return the serial number string descriptor
    248          * @param  speed : current device speed
    249          * @param  length : pointer to data length variable
    250          * @retval pointer to descriptor buffer
    251          */
    252          uint8_t *USBD_USR_SerialStrDescriptor(uint8_t speed, uint16_t * length)
    253          {
    254            *length = USB_SIZ_STRING_SERIAL;
    255          
    256            /* Update the serial number string descriptor with the data from the unique
    257             * ID */
    258            Get_SerialNum();
    259          
    260            return (uint8_t *) USBD_StringSerial;
    261          }
    262          
    263          /**
    264          * @brief  USBD_USR_ConfigStrDescriptor 
    265          *         return the configuration string descriptor
    266          * @param  speed : current device speed
    267          * @param  length : pointer to data length variable
    268          * @retval pointer to descriptor buffer
    269          */
    270          uint8_t *USBD_USR_ConfigStrDescriptor(uint8_t speed, uint16_t * length)
    271          {
    272            if (speed == USB_OTG_SPEED_HIGH)
    273            {
    274              USBD_GetString((uint8_t *) (uint8_t *) USBD_CONFIGURATION_HS_STRING,
    275                             USBD_StrDesc, length);
    276            }
    277            else
    278            {
    279              USBD_GetString((uint8_t *) (uint8_t *) USBD_CONFIGURATION_FS_STRING,
    280                             USBD_StrDesc, length);
    281            }
    282            return USBD_StrDesc;
    283          }
    284          
    285          
    286          /**
    287          * @brief  USBD_USR_InterfaceStrDescriptor 
    288          *         return the interface string descriptor
    289          * @param  speed : current device speed
    290          * @param  length : pointer to data length variable
    291          * @retval pointer to descriptor buffer
    292          */
    293          uint8_t *USBD_USR_InterfaceStrDescriptor(uint8_t speed, uint16_t * length)
    294          {
    295            if (speed == 0)
    296            {
    297              USBD_GetString((uint8_t *) (uint8_t *) USBD_INTERFACE_HS_STRING,
    298                             USBD_StrDesc, length);
    299            }
    300            else
    301            {
    302              USBD_GetString((uint8_t *) (uint8_t *) USBD_INTERFACE_FS_STRING,
    303                             USBD_StrDesc, length);
    304            }
    305            return USBD_StrDesc;
    306          }
    307          
    308          /**
    309            * @brief  Create the serial number string descriptor 
    310            * @param  None 
    311            * @retval None
    312            */
    313          static void Get_SerialNum(void)
    314          {
    315            uint32_t deviceserial0, deviceserial1, deviceserial2;
    316          
    317            deviceserial0 = *(uint32_t *) DEVICE_ID1;
    318            deviceserial1 = *(uint32_t *) DEVICE_ID2;
    319            deviceserial2 = *(uint32_t *) DEVICE_ID3;
    320          
    321            deviceserial0 += deviceserial2;
    322          
    323            if (deviceserial0 != 0)
    324            {
    325              IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
    326              IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
    327            }
    328          }
    329          
    330          /**
    331            * @brief  Convert Hex 32Bits value into char 
    332            * @param  value: value to convert
    333            * @param  pbuf: pointer to the buffer 
    334            * @param  len: buffer length
    335            * @retval None
    336            */
    337          static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
    338          {
    339            uint8_t idx = 0;
    340          
    341            for (idx = 0; idx < len; idx++)
    342            {
    343              if (((value >> 28)) < 0xA)
    344              {
    345                pbuf[2 * idx] = (value >> 28) + '0';
    346              }
    347              else
    348              {
    349                pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    350              }
    351          
    352              value = value << 4;
    353          
    354              pbuf[2 * idx + 1] = 0;
    355            }
    356          }
    357          
    358          /**
    359            * @}
    360            */
    361          
    362          
    363          /**
    364            * @}
    365            */
    366          
    367          
    368          /**
    369            * @}
    370            */
    371          
    372          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      12   IntToUnicode
       8   USBD_USR_ConfigStrDescriptor
         8   -> USBD_GetString
       0   USBD_USR_DeviceDescriptor
       8   USBD_USR_InterfaceStrDescriptor
         8   -> USBD_GetString
       0   USBD_USR_LangIDStrDescriptor
       8   USBD_USR_ManufacturerStrDescriptor
         8   -> USBD_GetString
       8   USBD_USR_ProductStrDescriptor
         8   -> USBD_GetString
      16   USBD_USR_SerialStrDescriptor
        16   -> IntToUnicode


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_2
       4  ??DataTable10_3
       4  ??DataTable10_4
      12  ?Subroutine0
      36  ?_0
      36  ?_1
      20  ?_2
      12  ?_3
      16  ?_4
      40  IntToUnicode
      20  USBD_DeviceDesc
      12  USBD_DeviceQualifierDesc
       4  USBD_LangIDDesc
     256  USBD_StrDesc
      28  USBD_StringSerial
       8  USBD_USR_ConfigStrDescriptor
       8  USBD_USR_DeviceDescriptor
      10  USBD_USR_InterfaceStrDescriptor
       8  USBD_USR_LangIDStrDescriptor
      10  USBD_USR_ManufacturerStrDescriptor
      22  USBD_USR_ProductStrDescriptor
      46  USBD_USR_SerialStrDescriptor
      28  USR_desc

 
 256 bytes in section .bss
  92 bytes in section .data
 304 bytes in section .text
 
 304 bytes of CODE memory
 348 bytes of DATA memory

Errors: none
Warnings: none
